cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
nrow
sapply(split((cnt0, cnt0$county.site), nrow)
sapply(split((cnt0, cnt0$county.site), nrow))
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.Id == 2008)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%y%m%d")
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(h = median(x0sub), na.rm = TRUE)
abline(h = median(x0sub, na.rm = TRUE), lwd =2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE), lwd =2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mtg[,2], xlim = c(.5,2.5) ))
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5,2.5) ))
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg.mean.y,]
mrg[mrg$mean.x < mrg$mean.y,]
quit()
rm(list=ls())
library(data.table)
library(ggplot2)
library(lubridate)
library(tidyr)
library(RColorBrewer)
library(dplyr)
library(coda)
library(plotly)
library(jpeg)
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
timeToDecimal <- function(column) {
unlist(lapply(
lapply(strsplit(challenge[,column,with=F][[1]], ':'), as.numeric), function(x) {
return(x[1] + x[2]/60 + x[3]/60/60)
}
))
}
cols <- gg_color_hue(4)
palette <- brewer.pal("Greys", n=9)
challenge <- fread('challenge.csv')
setnames(challenge, tolower(gsub(' ', '_', colnames(challenge))))
timeCols <- c('official_time', 'net_time', '10km_time', 'half_way_time', '30km_time')
challenge2 <- challenge
challenge3 <- challenge
for(tcol in timeCols) {
challenge2[, c(tcol) := list(timeToDecimal(tcol))]
challenge3[,c(tcol)] <- list(timeToDecimal(tcol))
}
install.packages(c("tidyr", "devtools"))
install.packages(c("tidyr", "devtools"))
devtools::install_github("garrettgman/DSR")
library(DSR)
table1
table2
table3
table4
table5
table6
table6
str(table1)
setwd("~/CursoDS/curso5/week2/RepData_PeerAssessment1")
# install.packages("reshape2")
library(reshape2)
data <- read.table(unz("activity.zip", "activity.csv"), header=T, quote="\"", sep=",")
data2 <- data[,c("date", "interval", "steps")]
names(data2) <- c("date", "variable", "value")
d <- dcast(data2, date~variable)
d2 <- d[,c(-1)]
coln <- names(d2)
meanAll <- sapply(d2, mean, na.rm=TRUE)
# meanAll2 <- meanAll[c(-1)]
nulos <- sapply(d2,is.na)
generate_index <- function() {
hr <- c()
for(i in seq(0,23)) {
for (j in seq(0,55, by = 5)) {
if (i == 0){
hr <- c(hr,  as.character(j))
} else {
if(j == 5 | j == 0){
v <- paste(i,j, sep="0")
hr <- c(hr, v)
} else {
v <- paste(i,j, sep="")
hr <- c(hr, v)
}
}
}
}
return(hr)
}
idx <- generate_index()
for (i in idx) {
col <- d2[,i]
val <- meanAll[i]
nulos <- is.na(col)
col[nulos] <- c(val)
d[,i] <- col
}
# hasta aqui ya no hay nulos
calc_sum_By_day <- function(){
fecha <- c()
suma <- c()
for(i in 1 : nrow(d)){
fecha <- c(fecha, as.character(d[i, "date"]))
s <- sum(d[i,idx])
suma <- c(suma, s)
}
df <- data.frame(fecha=fecha, sum=suma)
}
df <- calc_sum_By_day()
hist(df$sum)
calc_mean_By_day <- function(){
fecha <- c()
suma <- c()
for(i in 1 : nrow(d)){
fecha <- c(fecha, as.character(d[i, "date"]))
s <- mean(d[i,idx])
suma <- c(suma, s)
}
df <- data.frame(fecha=fecha, mean=suma)
}
df2 <- calc_mean_By_day()
m <- melt(d, id=c("date"))
aggregate(m$value, by = list(m$date), FUN=mean  )
## ##
## ##
proc_element <- function (x) {
g <- regexpr("^S.*", x)
if (g[1] == 1) {
hr <- TRUE
} else {
hr <- FALSE
}
return(hr)
}
apply(c(dfw$dias), 1, function(x){proc_element(x)})
data
apply(data, 1, is.na)
apply(data, 1, is.na)
lapply(data, 1, is.na)
names <- names(data)
n <- names(data)
lapply(data, is.na)
apply(data, is.na)
apply(data, 2, is.na)
apply(apply(data, 2, is.na),2  , sum)
apply(apply(data, 2, is.na),2  , mean)
names(data)
data
str(data)
data$date <- as.Date(as.character(data$date))
str(data)
hist(data$step, na.rm=TRUE)
hist(data$step)
hist(data$step)
hist(data$step)
hist(data$step)
aggregate(data$step, by = list(date))
aggregate(data$step, by = list(date), sum())
aggregate(data$step, by = list(date), sum)
aggregate(data$step, by = list(date), FUN = sum)
aggregate(step, data=data, mean)
View(data)
View(data)
aggregate(step, by=list(date), FUN=sum)
aggregate(step, by=list("date"), FUN=sum)
aggregate(data$step, by=list("date"), FUN=sum)
aggregate(data$step, by=list(date), FUN=sum)
aggregate(data$step, by=list(data$date), FUN=sum)
aggregate(data$step, by=list(data$date), FUN=sum, na.rm=TRUE)
agDay <- aggregate(data$step, by=list(data$date), FUN=sum, na.rm=TRUE)
str(agDay)
hist(agDay)
hist(agDay$x)
names(agDay) <- c("date", "step")
names(agDay) <- c("date", "steps")
hist(agDay$x)
hist(agDay$steps)
agDay <- aggregate(data$step, by=list(data$date), FUN=sum, na.rm=TRUE)
names(agDay) <- c("date", "steps")
hist(agDay$steps)
agDay <- aggregate(data$step, by=list(data$date), FUN=sum, na.rm=TRUE)
agDay
agDay <- aggregate(data$steps, by=list(data$date), FUN=sum, na.rm=TRUE)
agDay
names(agDay) <- c("date", "steps")
hist(agDay$steps)
hist(agDay$steps, title(main="Total steps by Day", xlab="Steps"))
hist(agDay$steps, title(main="Total steps by Day", xlab="Steps"))
hist(agDay$steps, title(main="Total steps by Day"))
hist(agDay$steps)
hist(agDay$steps)
title(main="Total steps by day", xlab="Steps")
hist(agDay$steps)
hist(agDay$steps, xlab = "Steps")
hist(agDay$steps, xlab = "Steps", main = "Total steps by Day")
agMean
agMean <- aggregate(data$steps, by=list(data$date), FUN=mean, na.rm=TRUE)
names(agMean) <- c("date", "steps")
hist(agMean$steps, xlab = "Steps", main = "Mean steps by Day")
agMedian <- aggregate(data$steps, by=list(data$date), FUN=median, na.rm=TRUE)
agmedian
agMedian
data
str(data)
median(data$steps)
median(data$steps, na.rm = TRUE)
summary(data)
s <- data$steps
s
agMedian <- aggregate(data$steps, by=list(data$date), FUN=median, na.rm=TRUE)
agMedian
agFive <- aggregate(data$steps, by=list(data$interval), FUN=mean, na.rm=TRUE)
agFive
agFive <- aggregate(data$steps, by=list(data$interval), FUN=mean, na.rm=TRUE)
agFive[max(agFive$x)]
agFive
names(agFive)
str(agFive)
max(agFive$x)
aggregate(agFive$x, max)
aggregate(agFive$x, FUN=max)
aggregate(agFive$x, agFive$Group.1, FUN=max)
aggregate(agFive$x, by=list(agFive$Group.1), FUN=max)
max(agFive)
subset(agFive, agFive$x = max(agFive$x))
subset(agFive, agFive$x == max(agFive$x))
max(agFive$x)
names(agFive) <- c("interval", "steps")
subset(agFive, agFive$interval == max(agFive$steps))
names(agFive)
subset(agFive, agFive$interval == max(agFive$steps))
str(agFive)
agFive
subset(agFive, agFive$interval == max(agFive$steps))
max(agFive$steps)
max(agFive$steps)
subset(agFive, agFive[1] == max(agFive[2]))
agFive[1]
subset(agFive, agFive[1] == max(agFive[2]))
subset(agFive, agFive$interval == max(agFive$steps))
agFive <- aggregate(data$steps, by=list(data$interval), FUN=mean, na.rm=TRUE)
str(agFive)
subset(agFive, agFive[1] == max(agFive[2]))
subset(agFive, agFive$x == max(agFive$x))
agFive <- aggregate(data$steps, by=list(data$interval), FUN=mean, na.rm=TRUE)
subset(agFive, agFive$x == max(agFive$x))
subset(agFive, agFive$x == max(agFive$x))
subset(agFive, agFive$x == max(agFive$x))[1]
agFive <- aggregate(data$steps, by=list(data$interval), FUN=mean, na.rm=TRUE)
agFive
agFive <- aggregate(data$steps, by=list(data$interval), FUN=mean, na.rm=TRUE)
subset(agFive, agFive$x == max(agFive$x))
names(agFive)
names(agFive) <- c("interval", "steps")
names(agFive)
subset(agFive, agFive$steps == max(agFive$steps))
max <- subset(agFive, agFive$steps == max(agFive$steps))
max
print(max)
print(max[1])
print(max[1])
print(max$interval[1]
)
aggregate(data$steps, by(data$interval), mean)
aggregate(data$steps, by= list(data$interval), mean)
aggregate(data$steps, by= list(data$interval), mean, na.rm=TRUE)
agInterval <- aggregate(data$steps, by= list(data$interval), mean)
agInterval
names(agInterval)
names(agInterval) <- c("interval", "mean.steps")
agInterval
agInterval <- aggregate(data$steps, by= list(data$interval), mean, )
agInterval <- aggregate(data$steps, by= list(data$interval), mean, na.rm=TRUE)
agInterval
names(agInterval) <- c("interval", "mean.steps")
agInterval
require("RPostgreSQL")
install.packages("RPostgreSQL")
require("RPostgreSQL")
pw <- {
"ratburvish"
}
drv <- dbDriver("PostgreSQL")
con dbConnect(drv, dbname = "ofbiz13prod",
host = "localhost",
port = 5432,
user = "ofbiz"
password = pw)
rm(pw)
dbExistsTable("acctg_trans")
dbExistsTable(con, "acctg_trans")
require("RPostgreSQL")
pw <- {
"ratburvish"
}
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "ofbiz13prod",
host = "localhost",
port = 5432,
user = "ofbiz"
password = pw)
rm(pw)
dbExistsTable(con, "acctg_trans")
#
# OFBiz conection
#
require("RPostgreSQL")
pw <- {
"ratburvish"
}
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "ofbiz13prod",
host = "localhost",
port = 5432,
user = "ofbiz",
password = pw)
rm(pw)
dbExistsTable(con, "acctg_trans")
#
# OFBiz conection
#
require("RPostgreSQL")
pw <- {
"ratburvish"
}
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "ofbiz13prod",
host = "localhost",
port = 5432,
user = "ofbiz",
password = pw)
rm(pw)
dbExistsTable(con, "acctg_trans")
#
# OFBiz conection
#
require("RPostgreSQL")
pw <- {
"ratburvish"
}
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "ofbiz13prod",
host = "localhost",
port = 5432,
user = "ofbiz",
password = pw)
rm(pw)
dbExistsTable(con, "acctg_trans")
df <- dbGetQuery(con, "select * from acctg_trans")
names(df)
head(df$is_posted)
sel <- c("acctg_trans_type_id", "created_date", party_id)
sel <- c("acctg_trans_type_id", "created_date", "party_id")
s <- df[,sel]
s
table(s)
sel
sel
table(s$acctg_trans_type_id, s$party_id)
table(s$acctg_trans_type_id, s$party_id)
table(s$acctg_trans_type_id, s$party_id)
table(s$acctg_trans_type_id, s$party_id)
table(s$acctg_trans_type_id, s$created_date)
head(df)
head(df)
str(df)
dbDisconnect(con)
dbUnloadDriver(drv )
agMean <- aggregate(data$steps, by=list(data$date), FUN=mean, na.rm=TRUE)
head(agMean)
agDayStep <- aggregate(data$steps, by= list(data$interval), sum, na.rm=TRUE)
head(agDayStep)
agDayStep <- aggregate(data$steps, by= list(data$date), sum, na.rm=TRUE)
head(agDayStep)
mean(agDayStep)
mean(agDayStep$x)
agMeanDay <- aggregate(data$steps, by= list(data$date), sum, na.rm=TRUE)
agMeanDay
summary(agMeanDay$x)
s <- summary(agMeanDay$x)
s$Median
s
s[1]
s[2]
s["Median"]
s["Mean"]
s$Mean
paste("Mean:", s["Mean"], "Median:", s["Median"], sep=" ")
s2 <- s[3,4]
s2 <- s[3]
s2
s2 <- s[3:4]
s2w
s2
agFive
data
t <- as.difftime("10:00")
t
t <- as.Date("12:45")
agFive
head(data)
data[is.na(data$steps)]
data[is.na(data$steps),]
agFive
for (i in 1:length(data)){}
for (i in 1:length(data)){ data[1,"steps"]}
for (i in 1:length(data)){ if(is.na(data[1,"steps"]) { print("t")}}
for (i in 1:length(data)){ if(is.na(data[1,"steps"]) print("t")}
for (i in 1:length(data)){
if(is.na(data[i,"steps"])){
print("t")
}
}
for (i in 1:length(data)){
if(is.na(data[i,"steps"])){
print(data[i, "interval"])
}
}
agFive
print(agFive[agFive["interval"] == data[i, "interval"])
print(agFive[agFive["interval"] == data[1, "interval"])
print(agFive[data[1, "interval"])
data[1,"interval"]
agFive[data[1,"interval"]]
agFive[,data[1,"interval"]]
agFive[data[1,"interval"],]
agFive[agFive$interval == "0"]
agFive[agFive$interval == 0]
agFive[agFive$interval == 0,]
agFive[agFive$interval == 10,]
agFive[agFive$interval == "10",]
agFive[agFive$interval == data[2,"interval"],]
agFive[agFive$interval == data[2,"interval"],"interval"]
agFive[agFive$interval == data[2,"interval"],"steps"]
for (i in 1:length(data)){
if(is.na(data[i,"steps"])){
agFive[agFive$interval == data[2,"interval"],"steps"]
}
}
for (i in 1:length(data)){
if(is.na(data[i,"steps"])){
agFive[agFive$interval == data[2,"interval"],"steps"]
}
}
length(data)
data
nrow(data)
for (i in 1:nrow(data)){
if(is.na(data[i,"steps"])){
agFive[agFive$interval == data[2,"interval"],"steps"]
}
}
for (i in 1:nrow(data)){
if(is.na(data[i,"steps"])){
res <- agFive[agFive$interval == data[2,"interval"],"steps"]
print(res)
}
}
for (i in 1:nrow(data)){
if(is.na(data[i,"steps"])){
res <- agFive[agFive$interval == data[i,"interval"],"steps"]
print(res)
}
}
for (i in 1:nrow(data)){
if(is.na(data[i,"steps"])){
res <- agFive[agFive$interval == data[i,"interval"],"steps"]
print(res)
data[i, "steps"] <- res
}
}
head(data)
str(data)
weekdays(data$date)
weekdays(data$date)
data$weekday <- weekdays(data$date)
date
data
subset(data, weekday == "Sunday" | weekday == "Saturday")
subset(data, weekday != "Sunday" & weekday != "Saturday")
subset(data, weekday == "Sunday" | weekday == "Saturday")
data$weekday <- weekdays(data$date)
subset(data, weekday == "Sunday" | weekday == "Saturday", select = c(steps, date, interval))
subset(data, weekday == "Sunday" | weekday == "Saturday", select = c(steps, date, interval))
